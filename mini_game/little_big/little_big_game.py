# -*- coding: utf-8 -*-

from aiogram import types

from New_life_3.mini_game.buttons import *

from aiogram.dispatcher import FSMContext

from aiogram.dispatcher.filters.state import StatesGroup, State


import random

number = random.randint(1, 20)
count_of_attempts = 1


class DataGame(StatesGroup):
    Offer_game = State()


async def game(message: types.Message):
    global count_of_attempts, number

    if count_of_attempts == 1:
        await message.answer(f'–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ \n—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–≥–∞–¥–∞—Ç—åüòâ', reply_markup=exit_game)
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æüßê')

    await DataGame.Offer_game.set()


async def info_game(message: types.Message, state: FSMContext):
    global number, count_of_attempts

    async with state.proxy() as data:
        data["answer2"] = count_of_attempts

    await state.finish()

    try:
        if int(message.text) == number:
            await message.answer(f'–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count_of_attempts}', reply_markup=user_game)
            restart_game = count_of_attempts - 1
            count_of_attempts -= restart_game
            number = random.randint(1, 20)

        elif int(message.text) < number:
            await message.answer(f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üôÉ \n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')
            count_of_attempts += 1
            await game(message)

        else:
            await message.answer(f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üôÉ \n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ')
            count_of_attempts += 1
            await game(message)
    except ValueError:
        await message.answer(f'–û—à–∏–±–∫–∞‚ùó\n–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø')
        await game(message)
